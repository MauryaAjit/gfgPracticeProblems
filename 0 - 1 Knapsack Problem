class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
         int n = val.length;
        int[][]dp=new  int [n+1][W+1];
        
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return ksh(n,W,val,wt,dp);
        
        
    }
    static int ksh(int n ,int W,int []val, int[]wt,int[][] dp){
        if(n==0 || W==0) return 0;
        if(dp[n][W] != -1) return dp[n][W];
        
        if(W >= wt[n-1]){
            return dp[n][W]=Math.max(ksh(n-1,W,val,wt,dp) , val[n-1]+
            ksh (n-1,W-wt[n-1],val,wt,dp));
            
        }
        return dp[n][W]=ksh(n-1,W,val,wt,dp);
    }
}
