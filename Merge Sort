import java.util.*;

class Solution {
    // Function to merge two subarrays
    void merge(int[] arr, int l, int m, int r) {
        // Sizes of subarrays
        int n1 = m - l + 1;
        int n2 = r - m;

        // Temporary arrays
        int[] left = new int[n1];
        int[] right = new int[n2];

        // Copy data into temp arrays
        for (int i = 0; i < n1; i++)
            left[i] = arr[l + i];
        for (int j = 0; j < n2; j++)
            right[j] = arr[m + 1 + j];

        // Merge temp arrays back into arr[l..r]
        int i = 0, j = 0, k = l;
        while (i < n1 && j < n2) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        // Copy remaining elements (if any)
        while (i < n1) {
            arr[k++] = left[i++];
        }
        while (j < n2) {
            arr[k++] = right[j++];
        }
    }

    // Function to perform merge sort
    void mergeSort(int[] arr, int l, int r) {
        if (l < r) {
            int m = l + (r - l) / 2; // avoid overflow

            // Sort first and second halves
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);

            // Merge sorted halves
            merge(arr, l, m, r);
        }
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        int[] arr1 = {4, 1, 3, 9, 7};
        sol.mergeSort(arr1, 0, arr1.length - 1);
        System.out.println(Arrays.toString(arr1)); 
        // Output: [1, 3, 4, 7, 9]

        int[] arr2 = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        sol.mergeSort(arr2, 0, arr2.length - 1);
        System.out.println(Arrays.toString(arr2)); 
        // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    }
}
