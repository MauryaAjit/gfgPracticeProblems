// Undirected Graph Cycle DAA
class Solution {
    public boolean isCycle(int V, int[][] edges) {
        
        ArrayList<Integer>[] adj = new ArrayList[V];
        for (int i = 0; i < V; i++) {
            adj[i] = new ArrayList<>();
        }

        
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj[u].add(v);
            adj[v].add(u);
        }

        int[] vis = new int[V];

        
        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                if (dfs(i, -1, adj, vis)) {
                    return true;
                }
            }
        }
        return false;
    }

    static boolean dfs(int node, int parent, ArrayList<Integer>[] adj, int[] vis) {
        vis[node] = 1;

        for (int neigh : adj[node]) {
            if (vis[neigh] == 0) {
                if (dfs(neigh, node, adj, vis)) {
                    return true;
                }
            } else if (neigh != parent) {
                return true; 
            }
        }
        return false;
    }
}
